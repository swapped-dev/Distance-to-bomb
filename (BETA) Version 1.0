#include <amxmod>
#include <VexdUM>
#include <csstats>

new const PLUGIN [] = "Distance from the bomb";
new const VERSION [] = "1.0";
new const AUTHOR [] = "Swapped";

new bool:IsDef;
new g_iC4EntityID;
new float:g_BombOrigin[ 3 ];

public plugin_init()
{
    register_plugin (PLUGIN, VERSION, AUTHOR );

}


public bomb_planted( id )
{

    IsDef = false;
        
    new iEntityID = -1
        
    while((iEntityID = find_entity(iEntityID, "grenade")) > 0) 
    {    
        if(get_offset_int(iEntityID, 96, 5) & (1<<8)) 
         {
            g_iC4EntityID = iEntityID
            break; 
        }
    }
    
    new Players[32] 
    new playerCount, i
    
    get_players(Players, playerCount, "b") 
    
    for (i=0; i<playerCount; i++) 
    {
        new x = Players[ i ];
        bomb_distance_hud( x );
    }
}

public bomb_distance_hud( id )
{
    new float:UserOrigin[ 3 ];
    get_user_origin(id, UserOrigin );
    get_user_origin( g_iC4EntityID, g_BombOrigin );
    new distance = get_distance( UserOrigin, g_BombOrigin );

    if( IsDef == true )
    {
        remove_task( id );
    }

    if( is_user_alive( id ) )
    {
        set_hudmessage(255, 0, 0, 0.0, 0.81, 0, 5.0, 0.1, 5.0, _, 1)
        show_hudmessage( id, "Distance until the bomb(meeters): %d", floatround( distance / 32.00 ) );
    }
    else
    {
        remove_task( id );
    }
    
    set_task( 1.0, "bomb_distance_hud", id );
}

public bomb_defused( id )
{
    IsDef = true;
}

public client_putinserver( id )
{
    IsDef = false;
} 

public bomb_exploded(planter,defuser)
{
    IsDef = false;
}
